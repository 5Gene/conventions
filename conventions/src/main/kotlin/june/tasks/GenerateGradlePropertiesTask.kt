package june.tasks

import june.wing.srcDirs
import org.gradle.api.DefaultTask
import org.gradle.api.Project
import org.gradle.api.file.DirectoryProperty
import org.gradle.api.file.FileType
import org.gradle.api.file.RegularFileProperty
import org.gradle.api.provider.Property
import org.gradle.api.tasks.Input
import org.gradle.api.tasks.InputFile
import org.gradle.api.tasks.OutputDirectory
import org.gradle.api.tasks.TaskAction
import org.gradle.api.tasks.TaskProvider
import org.gradle.kotlin.dsl.assign
import org.gradle.kotlin.dsl.register
import org.gradle.work.ChangeType
import org.gradle.work.Incremental
import org.gradle.work.InputChanges
import org.jetbrains.kotlin.konan.properties.loadProperties

fun Project.generateGradlePropTask(): TaskProvider<GenerateGradlePropertiesTask> {
    //编译好的文件要添加到src源码目录
    srcDirs("build/generated/prop/main/kotlin")
    return tasks.register<GenerateGradlePropertiesTask>("gradleProperties") {
        group = "zoy"
        outputDir = layout.buildDirectory.dir("generated/prop/main/kotlin")
        inputFile = rootProject.file("gradle.properties")
        projectName = project.name
    }
}

/**
 * 只有不带.的key才会被生成到文件中
 */
abstract class GenerateGradlePropertiesTask : DefaultTask() {

    @get:OutputDirectory
    abstract val outputDir: DirectoryProperty
//    val outputDir: DirectoryProperty = objects.directoryProperty()

    @get:Incremental
    @get:InputFile
    abstract val inputFile: RegularFileProperty
//    val inputFile: RegularFileProperty = objects.fileProperty()

    @get:Input
    abstract val projectName: Property<String>

    //https://docs.gradle.org/current/userguide/custom_tasks.html#sec:implementing_an_incremental_task
    @TaskAction
    fun generate(inputs: InputChanges) {
        println(
            if (inputs.isIncremental) {
                "CHANGED inputs are out of date"
            } else {
                "ALL inputs are out of date"
            }
        )

        inputs.getFileChanges(inputFile).forEach { change ->
            if (change.fileType == FileType.DIRECTORY) return@forEach
            println("${change.changeType}: ${change.normalizedPath}")
            val properties = loadProperties(change.normalizedPath)
            println("### $properties")
            val targetFile = outputDir.file("BuildProperties.kt").get().asFile
            targetFile.parentFile.mkdirs()
            if (change.changeType == ChangeType.REMOVED) {
                targetFile.delete()
            } else {
                targetFile.writeText(
                    """
package ${projectName.get().replace("-", ".")}

// auto generated by task from ${inputFile.asFile.get().name} 
internal object BuildProperties {
${
                        properties.filter { !it.key.toString().contains(".") }.map { (k, v) ->
                            "    internal const val ${k.toString().uppercase()}: String = \"$v\""
                        }.joinToString(separator = "\n")
                    }
}
                """.trim()
                )
            }
        }
    }
}